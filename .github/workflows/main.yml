name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ coq-ci ]
  pull_request:
    branches: [ coq-ci ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
#   build-bin:
#     name: build-bin
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         # Browse URL: https://github.com/coq-community/docker-coq/wiki#supported-tags
#         # to get the list of supported (coq, ocaml) versions in coqorg/coq.
#         coq_version:
#         #  - '8.15'
#           - 'dev'
#         ocaml_version:
#           - '4.14.1-flambda'
#       # at most 20 concurrent jobs per free account:
#       # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#usage-limits
#       max-parallel: 4
#       # don't cancel all in-progress jobs if one matrix job fails:
#       fail-fast: false
# 
# 
#     # Steps represent a sequence of tasks that will be executed as part of the job.
#     steps:
#       - name: Cache build folder
#         uses: actions/cache@v2
#         id: cache-build
#         env:
#           cache-name: cache-build
#         with:
#           # npm cache files are stored in `~/.npm` on Linux/macOS
#           path: build
#           key: ${{ runner.os }}-${{ matrix.coq_version }}-${{ matrix.ocaml_version }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
#       - uses: actions/checkout@v3
#       - uses: coq-community/docker-coq-action@v1
#         if: steps.cache-build.outputs.cache-hit != 'true'
#         with:
#           before_install: |
#             startGroup "Pin dependencies"
#               sudo apt-get update -y -q
#               sudo apt-get install -y -q llvm llvm-dev clang
#             endGroup
#           opam_file: 'coq-cpp2v-bin.opam'
#           coq_version: ${{ matrix.coq_version }}
#           ocaml_version: ${{ matrix.ocaml_version }}
#           export: ''

  build-coq:
    name: build-coq
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Browse URL: https://github.com/coq-community/docker-coq/wiki#supported-tags
        # to get the list of supported (coq, ocaml) versions in coqorg/coq.
        coq_version:
        #  - '8.15'
          - 'dev'
        ocaml_version:
          - '4.14.1-flambda'
      # at most 20 concurrent jobs per free account:
      # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#usage-limits
      max-parallel: 4
      # don't cancel all in-progress jobs if one matrix job fails:
      fail-fast: false


    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - uses: actions/checkout@v3
      - name: Cache _build folder
        uses: actions/cache@v2
        id: cache-_build
        env:
          cache-name: cache-_build
        with:
          path: _build
          key: ${{ runner.os }}-${{ matrix.coq_version }}-${{ matrix.ocaml_version }}-_build-${{ env.cache-name }}-${{ hashFiles('coq-cpp2v.opam') }}
      - name: Cache opam switch
        uses: actions/cache@v2
        id: cache-opam
        env:
          cache-name: cache-opam
        with:
          path: ~/.opam
          key: ${{ runner.os }}-${{ matrix.coq_version }}-${{ matrix.ocaml_version }}-opam-${{ env.cache-name }}-${{ hashFiles('coq-cpp2v.opam') }}
      - uses: coq-community/docker-coq-action@v1
        if: steps.cache-opam.outputs.cache-hit != 'true' && steps.cache-_build.outputs.cache-hit != 'true'
        with:
          before_install: |
            startGroup
                  opam repo add -y iris-dev https://gitlab.mpi-sws.org/iris/opam.git
                  # pin some dependencies to the branches used by coq CI
                  # NOTE: iris and stdpp use hardcoded versions from ./dune-project.
                  # This is also done for other projects in Coq CI that depend on iris and stdpp.
                  opam pin add -n -y -k git coq-elpi git+https://github.com/LPCIC/coq-elpi.git#coq-master
                  opam pin add -n -y -k git coq-ext-lib git+https://github.com/coq-community/coq-ext-lib#master
                  opam repo
                  opam list
            endGroup
          opam_file: 'coq-cpp2v.opam'
          coq_version: ${{ matrix.coq_version }}
          ocaml_version: ${{ matrix.ocaml_version }}
          export: ''
      - uses: coq-community/docker-coq-action@v1
        if: steps.cache-opam.outputs.cache-hit == 'true' && steps.cache-_build.outputs.cache-hit != 'true'
        with:
          before_install: |
            startGroup
                  opam repo
                  opam list
            endGroup
          opam_file: 'coq-cpp2v.opam'
          coq_version: ${{ matrix.coq_version }}
          ocaml_version: ${{ matrix.ocaml_version }}
          export: ''
